configs:
  coredns:
    content: |
      .:53 {
        errors
        health
        rewrite stop {
          name regex (.*)\.ts\.ibeep\.com$ {1}.shark-perch.ts.net
          answer name (.*)\.shark-perch\.ts\.net\.$ {1}.ts.ibeep.com
        }
        proxy . dns://100.100.100.100
      }

x-ts-sidecar: &ts-sidecar
  # volumes:
  #   - ts_state:/ts_state
  image: tailscale/tailscale:latest
  environment: &ts-env
    TS_AUTHKEY: ${TS_AUTHKEY}
    TS_EXTRA_ARGS: "--advertise-tags=tag:docker"
    #TS_USERSPACE: false
    TS_ENABLE_HEALTH_CHECK: true
    TS_LOCAL_ADDR_PORT: 127.0.0.1:41234
    TS_STATE: "mem:"
    #TS_SERVE_CONFIG: /config/serve.json
    #TS_AUTHKEY: tskey-auth-kS5WUC4XYe11CNTRL-AT7DucG3DnhrX8j6rmPdhhcuN2mRerBk
    #TS_HOSTNAME: generic-sidecar
  #    ports:
  #      - "8120"
  #    devices:
  #      - /dev/net/tun:/dev/net/tun # Network configuration for Tailscale to work
  #    cap_add:
  #      - net_admin # Tailscale requirement
  #      - sys_module # Tailscale requirement
  healthcheck:
    test: ["CMD", "wget", "--spider", "-q", "http://127.0.0.1:41234/healthz"] # Check Tailscale has a Tailnet IP and is operational
    interval: 1m # How often to perform the check
    timeout: 10s # Time to wait for the check to succeed
    retries: 3 # Number of retries before marking as unhealthy
    start_period: 10s # Time to wait before starting health checks
  restart: always
services:
  coredns-ts:
    <<: *ts-sidecar
    environment:
      <<: *ts-env
      TS_HOSTNAME: "coredns"
    extra_hosts:
      - host.docker.internal=host-gateway
    #ports:
    #  - 80:80
  coredns:
    network_mode: service:coredns-ts
    image: docker.io/coredns/coredns:latest
    configs:
      - coredns
    command:
      - -conf
      - /root/coredns

  technitium-dns:
    container_name: dns-server
    hostname: dns-server
    image: technitium/dns-server:latest
    network_mode: "host"
    environment:
      - DNS_SERVER_DOMAIN=pn.ibeep.com #The primary domain name used by this DNS Server to identify itself.
      - DNS_SERVER_ADMIN_PASSWORD=${DNS_SERVER_ADMIN_PASSWORD} #DNS web console admin user password.
      # - DNS_SERVER_ADMIN_PASSWORD_FILE=password.txt #The path to a file that contains a plain text password for the DNS web console admin user.
      # - DNS_SERVER_PREFER_IPV6=false #DNS Server will use IPv6 for querying whenever possible with this option enabled.
      # - DNS_SERVER_WEB_SERVICE_LOCAL_ADDRESSES=172.17.0.1,127.0.0.1 #Comma separated list of network interface IP addresses that you want the web service to listen on for requests. The "172.17.0.1" address is the built-in Docker bridge. The "[::]" is the default value if not specified. Note! This must be used only with "host" network mode.
      # - DNS_SERVER_WEB_SERVICE_HTTP_PORT=5380 #The TCP port number for the DNS web console over HTTP protocol.
      - DNS_SERVER_WEB_SERVICE_HTTPS_PORT=53443 #The TCP port number for the DNS web console over HTTPS protocol.
      - DNS_SERVER_WEB_SERVICE_ENABLE_HTTPS=false #Enables HTTPS for the DNS web console.
      # - DNS_SERVER_WEB_SERVICE_USE_SELF_SIGNED_CERT=false #Enables self signed TLS certificate for the DNS web console.
      - DNS_SERVER_OPTIONAL_PROTOCOL_DNS_OVER_HTTP=true #Enables DNS server optional protocol DNS-over-HTTP on TCP port 8053 to be used with a TLS terminating reverse proxy like nginx.
      # - DNS_SERVER_RECURSION=AllowOnlyForPrivateNetworks #Recursion options: Allow, Deny, AllowOnlyForPrivateNetworks, UseSpecifiedNetworkACL.
      # - DNS_SERVER_RECURSION_NETWORK_ACL=192.168.10.0/24, !192.168.10.2 #Comma separated list of IP addresses or network addresses to allow access. Add ! character at the start to deny access, e.g. !192.168.10.0/24 will deny entire subnet. The ACL is processed in the same order its listed. If no networks match, the default policy is to deny all except loopback. Valid only for `UseSpecifiedNetworkACL` recursion option.
      # - DNS_SERVER_RECURSION_DENIED_NETWORKS=1.1.1.0/24 #Comma separated list of IP addresses or network addresses to deny recursion. Valid only for `UseSpecifiedNetworkACL` recursion option. This option is obsolete and DNS_SERVER_RECURSION_NETWORK_ACL should be used instead.
      # - DNS_SERVER_RECURSION_ALLOWED_NETWORKS=127.0.0.1, 192.168.1.0/24 #Comma separated list of IP addresses or network addresses to allow recursion. Valid only for `UseSpecifiedNetworkACL` recursion option.  This option is obsolete and DNS_SERVER_RECURSION_NETWORK_ACL should be used instead.
      # - DNS_SERVER_ENABLE_BLOCKING=false #Sets the DNS server to block domain names using Blocked Zone and Block List Zone.
      # - DNS_SERVER_ALLOW_TXT_BLOCKING_REPORT=false #Specifies if the DNS Server should respond with TXT records containing a blocked domain report for TXT type requests.
      # - DNS_SERVER_BLOCK_LIST_URLS= #A comma separated list of block list URLs.
      # - DNS_SERVER_FORWARDERS=1.1.1.1, 8.8.8.8 #Comma separated list of forwarder addresses.
      # - DNS_SERVER_FORWARDER_PROTOCOL=Tcp #Forwarder protocol options: Udp, Tcp, Tls, Https, HttpsJson.
      - DNS_SERVER_LOG_USING_LOCAL_TIME=true #Enable this option to use local time instead of UTC for logging.
    volumes:
      - config:/etc/dns
    restart: unless-stopped
    #sysctls:
      #- net.ipv4.ip_local_port_range=1024 65000

volumes:
    config:
